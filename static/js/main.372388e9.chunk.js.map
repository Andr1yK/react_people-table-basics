{"version":3,"sources":["layouts/Header/Header.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","api/getPeople.ts","api/api.ts","components/PeopleTable/PeopleTableHeader.tsx","components/PeopleTable/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","App.tsx","index.tsx"],"names":["routes","name","path","Header","memo","useState","currentPath","setCurrentPath","className","map","to","isActive","setTimeout","HomePage","NotFoundPage","getPeople","a","url","fetch","response","json","data","person","preparedPerson","father","fatherName","mother","motherName","PeopleTableHeader","header","PersoneRow","key","slug","PeopleTable","people","Object","keys","PeoplePage","setPeople","useEffect","getPeopleFromServer","App","element","replace","ReactDOM","render","document","getElementById"],"mappings":"iPAMMA,EAAS,CACb,CACEC,KAAM,OACNC,KAAM,KACL,CACDD,KAAM,SACNC,KAAM,YAIGC,EAAoBC,gBAAK,WACpC,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,wBAAQC,UAAU,6BAAlB,SACE,6BACGR,EAAOS,KAAI,gBAAGR,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACV,oBAAIM,UAAWF,IAAgBJ,EAAO,YAAc,GAApD,SACE,cAAC,IAAD,CACEQ,GAAIR,EACJM,UAAW,YAKT,OAL2B,EAAfG,UAEVC,YAAW,kBAAML,EAAeL,MAG3B,QAPX,SAUGD,KAXwDA,aCrB1DY,EAAeT,gBAAK,WAC/B,OACE,oBAAII,UAAU,QAAd,0BCFSM,EAAmBV,gBAAK,WACnC,OACE,oBAAII,UAAU,QAAd,+B,+BCcSO,EAAS,uCAAG,8BAAAC,EAAA,sEChBDC,EDiBS,eCjBOC,MAAM,GAAD,OAF5B,yDAE4B,OAAeD,IDgBnC,cACjBE,EADiB,gBAE0BA,EAASC,OAFnC,cAEjBC,EAFiB,yBAIEA,EAlBXZ,KAAI,SAAAa,GAChB,IAAMC,EAAyC,2BAC1CD,GAD0C,IAE7CE,OAAQF,EAAOG,WACfC,OAAQJ,EAAOK,aAMjB,cAHOJ,EAAeE,kBACfF,EAAeI,WAEfJ,MAIc,iCAfC,ICDFN,IDgBC,OAAH,qDEZTW,EAA+BxB,gBAAK,YAAiB,IAAdyB,EAAa,EAAbA,OAClD,OACE,gCACGA,EAAOpB,KAAI,SAACR,GAAD,OAAU,6BAAgBA,GAAPA,WCDxB6B,EAAwB1B,gBAAK,YAAyB,IAAtBkB,EAAqB,EAArBA,OAAQO,EAAa,EAAbA,OACnD,OACE,6BACGA,EAAOpB,KAAI,SAAAsB,GAAG,OAAI,6BAAKT,EAAOS,SADxBT,EAAOU,SCDPC,EAAyB7B,gBAAK,YAAsB,IAAD,IAAlB8B,cAAkB,MAAT,GAAS,EACxDL,EAASM,OAAOC,KAAKF,EAAO,IAAM,IAExC,OACE,wBAAO1B,UAAU,mBAAjB,UACE,cAACoB,EAAD,CAAmBC,OAAQA,IAC3B,gCACGK,EAAOzB,KAAI,SAACa,GAAD,OACV,cAACQ,EAAD,CAAYD,OAAQA,EAAQP,OAAQA,eCPjCe,EAAiBjC,gBAAK,WACjC,MAA4BC,mBAAmB,IAA/C,mBAAO6B,EAAP,KAAeI,EAAf,KAYA,OAVAC,qBAAU,WACR,IAAMC,EAAmB,uCAAG,4BAAAxB,EAAA,sEACPD,IADO,OACpBM,EADoB,OAG1BiB,EAAUjB,GAHgB,2CAAH,qDAMzBmB,MACC,IAGD,qCACE,oBAAIhC,UAAU,QAAd,yBAIA,cAACyB,EAAD,CAAaC,OAAQA,UCNZO,EAfHrC,gBAAK,kBACf,sBAAKI,UAAU,MAAf,UACE,cAACL,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOD,KAAK,IAAIwC,QAAS,cAAC7B,EAAD,MACzB,cAAC,IAAD,CAAOX,KAAK,SAASwC,QAAS,cAACL,EAAD,MAC9B,cAAC,IAAD,CACEnC,KAAK,OACLwC,QAAS,cAAC,IAAD,CAAUhC,GAAG,IAAIiC,SAAO,MAEnC,cAAC,IAAD,CAAOzC,KAAK,IAAIwC,QAAS,cAAC5B,EAAD,eCb/B8B,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.372388e9.chunk.js","sourcesContent":["import { memo, FC, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport 'bulma';\n\ntype Props = {};\n\nconst routes = [\n  {\n    name: 'Home',\n    path: '/',\n  }, {\n    name: 'People',\n    path: '/people',\n  },\n];\n\nexport const Header: FC<Props> = memo(() => {\n  const [currentPath, setCurrentPath] = useState('');\n\n  return (\n    <header className=\"tabs is-centered is-medium\">\n      <ul>\n        {routes.map(({ name, path }) => (\n          <li className={currentPath === path ? 'is-active' : ''} key={name}>\n            <NavLink\n              to={path}\n              className={({ isActive }) => {\n                if (isActive) {\n                  setTimeout(() => setCurrentPath(path));\n                }\n\n                return 'link';\n              }}\n            >\n              {name}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </header>\n  );\n});\n","import { memo, FC } from 'react';\n\nexport const HomePage: FC = memo(() => {\n  return (\n    <h1 className=\"title\">\n      Home Page\n    </h1>\n  );\n});\n","import { memo, FC } from 'react';\n\nexport const NotFoundPage: FC = memo(() => {\n  return (\n    <h1 className=\"title\">\n      Page not found\n    </h1>\n  );\n});\n","import { Person, PersonFromServer } from '../types/Person';\nimport { request } from './api';\n\nconst getPreparedPeople = (people: Required<PersonFromServer>[]): Person[] => {\n  return people.map(person => {\n    const preparedPerson: Person & PersonFromServer = {\n      ...person,\n      father: person.fatherName,\n      mother: person.motherName,\n    };\n\n    delete preparedPerson.fatherName;\n    delete preparedPerson.motherName;\n\n    return preparedPerson;\n  });\n};\n\nexport const getPeople = async () => {\n  const response = await request('/people.json');\n  const data: Required<PersonFromServer>[] = await response.json();\n\n  return getPreparedPeople(data);\n};\n","const BASE_URL = 'https://mate-academy.github.io/react_people-table/api';\n\nexport const request = (url: string) => fetch(`${BASE_URL}${url}`);\n","import { memo, FC } from 'react';\n\ntype Props = {\n  header: string[],\n};\n\nexport const PeopleTableHeader: FC<Props> = memo(({ header }) => {\n  return (\n    <thead>\n      {header.map((name) => <th key={name}>{name}</th>)}\n    </thead>\n  );\n});\n","import { memo, FC } from 'react';\nimport { Person } from '../../types/Person';\n\ntype Props = {\n  header: string[],\n  person: Person,\n};\n\nexport const PersoneRow: FC<Props> = memo(({ person, header }) => {\n  return (\n    <tr key={person.slug}>\n      {header.map(key => <td>{person[key as keyof Person]}</td>)}\n    </tr>\n  );\n});\n","import { memo, FC } from 'react';\nimport { Person } from '../../types/Person';\nimport { PeopleTableHeader } from './PeopleTableHeader';\nimport { PersoneRow } from './PersonRow';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: FC<Props> = memo(({ people = [] }) => {\n  const header = Object.keys(people[0] || {});\n\n  return (\n    <table className=\"table is-striped\">\n      <PeopleTableHeader header={header} />\n      <tbody>\n        {people.map((person) => (\n          <PersoneRow header={header} person={person} />\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import {\n  memo,\n  FC,\n  useState,\n  useEffect,\n} from 'react';\nimport { getPeople } from '../api/getPeople';\nimport PeopleTable from '../components/PeopleTable';\nimport { Person } from '../types/Person';\n\nexport const PeoplePage: FC = memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    const getPeopleFromServer = async () => {\n      const data = await getPeople();\n\n      setPeople(data);\n    };\n\n    getPeopleFromServer();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">\n        People Page\n      </h1>\n\n      <PeopleTable people={people} />\n    </>\n  );\n});\n","import { memo } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport Header from './layouts';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\n\nconst App = memo(() => (\n  <div className=\"App\">\n    <Header />\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route path=\"people\" element={<PeoplePage />} />\n      <Route\n        path=\"home\"\n        element={<Navigate to=\"/\" replace />}\n      />\n      <Route path=\"*\" element={<NotFoundPage />} />\n    </Routes>\n  </div>\n));\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport 'bulma';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}